#!/usr/bin/env bash

# This script performs a kick test of the COùòïCEPT (PP) code, by comparison
# with GADGET (treePM). ICs are generated, containing 8 particles placed
# symetrically  so that a force only exist in the x-direction. The particles
# start out with zero velocity.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "${this_dir}")"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Cleanup from last test run
"${this_dir}/clean"

# Create the Ewald grid using Cython
rm -f "${reusables_dir}/ewald/ewald_gridsize=$(get_param 'ewald_gridsize').hdf5"
ewald_gridsize="$(get_param ewald_gridsize)"
select_forces="$(get_param select_forces)"
echo "ewald_gridsize = ${ewald_gridsize}" >  "${this_dir}/params_ewald"
echo "select_forces  = ${select_forces}"  >> "${this_dir}/params_ewald"
"${concept}" -n 1 -p "${this_dir}/params_ewald" --local

# Generate ICs
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/generate_IC.py" --pure-python --local

# Run the COùòïCEPT code on the generated ICs
"${concept}" -n 1 -p "${this_dir}/params" --local

# Dump list of snapshot output times used by GADGET
"${python}" -B -c "import numpy as np
np.savetxt('${this_dir}/outputlist', $(get_param "snapshot_times['a']"))"

# Create an edited version of Makefile_gadget with correct parth information
cp "${this_dir}/Makefile_gadget" "${this_dir}/Makefile_gadget_edited"
sed -i "/^ *CC= / s/ [^# ]/ \"${mpicc//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_includedir}"
sed -i "/^ *MPI_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_libdir}"
MPI_LIBS="\"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\" -lmpi"
if [ -d "${mpi_symlinkdir}" ]; then
    MPI_LIBS="${MPI_LIBS} \"-L${mpi_symlinkdir//\//\\/}\" -Wl,\"-rpath=${mpi_symlinkdir//\//\\/}\""
fi
sed -i "/^ *MPI_LIBS= / s/ [^# ]/ ${MPI_LIBS}/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/include"
sed -i "/^ *GSL_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/lib"
sed -i "/^ *GSL_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/include"
sed -i "/^ *FFTW_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/lib"
sed -i "/^ *FFTW_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"

# Make a local copy of the files in the GADGET2 directory and copy the edited Makefile
Gadget2_local_dir="${this_dir}/Gadget2_local"
mkdir -p "${Gadget2_local_dir}"
cp "${Gadget2_dir}/"* "${Gadget2_local_dir}" || :
cp "${this_dir}/Makefile_gadget_edited" "${Gadget2_local_dir}/Makefile"

# Build Gadget and run simulation based on the ICs.
# Note that it is crucial to use a relative path to the parameter file
# as the path has a maximum allowed length in GADGET.
(cd "${Gadget2_local_dir}" && make clean \
                           && make       \
                           && "${Gadget2_local_dir}/Gadget2" ../params_gadget)

# Analyze the output snapshots
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Copy the tabulated Ewald corrections to the Gadget2 directory if it does not
# already exist there, to save time later.
if    [ ! -f "${Gadget2_dir}/ewald_spc_table_64.dat"       ] \
   && [   -f "${Gadget2_local_dir}/ewald_spc_table_64.dat" ]; then
    cp "${Gadget2_local_dir}/ewald_spc_table_64.dat" "${Gadget2_dir}/ewald_spc_table_64.dat"
fi

# Test ran successfully. Deactivate traps.
trap : 0
