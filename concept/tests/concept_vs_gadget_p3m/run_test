#!/usr/bin/env bash

# This script performs a comparison test between the COùòïCEPT code's
# P3M implementation and the GADGET code's TreePM implementation.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "${this_dir}")"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Cleanup from last test run
"${this_dir}/clean"

# Generate ICs
echo "$(cat "${this_dir}/params")
output_dirs  = {'snapshot': '${this_dir}'}
output_bases = {'snapshot': 'IC'}
output_times = {'snapshot': a_begin}
initial_conditions = {'name'   : 'GADGET halos',
                      'species': 'matter particles',
                      'N'      : 8**3,
                      }
enable_class_background = True  # Do use CLASS when creating the initial conditions
" > "${this_dir}/ic.params"
"${concept}" -n 1                       \
             -p "${this_dir}/ic.params" \
             --local
mv "${this_dir}/IC"* "${this_dir}/IC"

# Run the COùòïCEPT code on the generated ICs
"${concept}" -n 1 -p "${this_dir}/params" --local

# Dump list of snapshot output times used by GADGET
"${python}" -B -c "import numpy as np
np.savetxt('${this_dir}/outputlist', $(get_param "snapshot_times['a']"))"

# Create an edited version of Makefile_gadget with correct parth information
cp "${this_dir}/Makefile_gadget" "${this_dir}/Makefile_gadget_edited"
sed -i "/^ *CC= / s/ [^# ]/ \"${mpicc//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_includedir}"
sed -i "/^ *MPI_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${mpi_libdir}"
MPI_LIBS="\"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\" -lmpi"
if [ -d "${mpi_symlinkdir}" ]; then
    MPI_LIBS="${MPI_LIBS} \"-L${mpi_symlinkdir//\//\\/}\" -Wl,\"-rpath=${mpi_symlinkdir//\//\\/}\""
fi
sed -i "/^ *MPI_LIBS= / s/ [^# ]/ ${MPI_LIBS}/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/include"
sed -i "/^ *GSL_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${gsl_dir}/lib"
sed -i "/^ *GSL_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/include"
sed -i "/^ *FFTW_INCL= / s/ [^# ]/ \"-I${path//\//\\/}\"/" "${this_dir}/Makefile_gadget_edited"
path="${fftw_for_gadget_dir}/lib"
sed -i "/^ *FFTW_LIBS= / s/ [^# ]/ \"-L${path//\//\\/}\" -Wl,\"-rpath=${path//\//\\/}\"/" \
       "${this_dir}/Makefile_gadget_edited"

# Make a local copy of the files in the GADGET2 directory
# and copy the edited Makefile.
Gadget2_local_dir="${this_dir}/Gadget2_local"
mkdir -p "${Gadget2_local_dir}"
cp "${Gadget2_dir}/"* "${Gadget2_local_dir}" || :
cp "${this_dir}/Makefile_gadget_edited" "${Gadget2_local_dir}/Makefile"

# Build Gadget and run simulation based on the ICs.
# Note that it is crucial to use a relative path to the parameter file
# as the path has a maximum allowed length in GADGET.
(cd "${Gadget2_local_dir}" && make clean \
                           && make       \
                           && "${Gadget2_local_dir}/Gadget2" ../params_gadget)

# Analyze the output snapshots
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Test ran successfully. Deactivate traps.
trap : 0
